import pickle
import joblib
import numpy
import pandas
import sklearn.ensemble as ek
from sklearn.feature_selection import SelectFromModel
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import train_test_split
import os  # Import the os module for path manipulation

# Get the current working directory
current_directory = os.path.dirname(os.path.abspath(__file__))

# Specify the relative path to the dataset file within the "datasets" folder
dataset_file = os.path.join(current_directory, 'datasets', 'dataset_1.csv')

# Read the dataset using the relative path
dataset = pandas.read_csv(dataset_file, sep=',', low_memory=False)

# Data preprocessing
X = dataset.drop(['ID', 'md5', 'legitimate'], axis=1).values
y = dataset['legitimate'].values

# Features we need for DTs
extratrees = ek.ExtraTreesClassifier().fit(X, y)
model = SelectFromModel(extratrees, prefit=True)
X_new = model.transform(X)
nbfeatures = X_new.shape[1]

X_train, X_test, y_train, y_test = train_test_split(X_new, y, test_size=0.2)

features = []
index = numpy.argsort(extratrees.feature_importances_)[::-1][:nbfeatures]
for f in range(nbfeatures):
    features.append(dataset.columns[2 + f])

# Save the trained model and feature list
model = ek.RandomForestClassifier(n_estimators=33)
model.fit(X_train, y_train)

# Specify the paths for saving the model and feature list
model_path = os.path.join(current_directory, 'model', 'model.pkl')
features_path = os.path.join(current_directory, 'model', 'features.pkl')

# Save the model and features using joblib and pickle
joblib.dump(model, model_path)
open(features_path, 'wb').write(pickle.dumps(features))

# False Positives and Negatives
res = model.predict(X_new)
mt = confusion_matrix(y, res)
print("False positive rate: %f%%" % ((mt[0][1] / float(sum(mt[0])) * 100)))
print("False negative rate: %f%%" % (mt[1][0] / float(sum(mt[1]) * 100)))
